# azure-pipelines.yml

parameters:
  - name: "testplan"
    type: string
    default: "CT-1276"

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # It's a good practice to define the Python version as a variable
  python.version: '3.12.3'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    mkdir -p reports
    pytest --junitxml=reports/results.xml

  displayName: 'Run Pytest and Upload to Xray Cloud'
  env:
    # Expose Azure DevOps secret variables as environment variables for the script
    XRAY_BASE_URL: $(xray_endpoint)
    XRAY_CLIENT_ID: $client_id
    XRAY_CLIENT_SECRET: $(client_secret)

- script: |
    cat reports/results.xml  # Esto imprime el contenido del archivo para ver si estÃ¡ bien formado.
  displayName: 'Check results file'
  condition: always()

# Note: To make this pipeline functional, you need to configure the following
# secret variables in your Azure DevOps project settings (under Pipelines -> Library):
#   - XRAY_BASE_URL: Your Xray Cloud instance URL (e.g., https://xray.cloud.getxray.app)
#   - XRAY_CLIENT_ID: Your Xray API Client ID
#   - XRAY_CLIENT_SECRET: Your Xray API Client Secret
# These variables will be securely injected into the pipeline at runtime.

- bash: |
    set -x
    export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$CLIENT_ID\",\"client_secret\": \"$CLIENT_SECRET\" }" "$(xray_endpoint)/api/v2/authenticate"| tr -d '"')
    curl -X POST -H "Content-Type: text/xml" -H "Authorization: Bearer $token"  --data @"reports/results.xml" $(xray_endpoint)/api/v2/import/execution/junit?projectKey=CT&testPlanKey=${{ parameters.testplan }}
  displayName: 'Import results to Xray cloud'
  condition: always()
